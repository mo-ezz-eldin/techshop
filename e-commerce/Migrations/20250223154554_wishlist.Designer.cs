// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using e_commerce;

#nullable disable

namespace e_commerce.Migrations
{
    [DbContext(typeof(appdb))]
    [Migration("20250223154554_wishlist")]
    partial class wishlist
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("e_commerce.Models.category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(125)
                        .HasColumnType("varchar");

                    b.HasKey("Id");

                    b.ToTable("categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Electronics"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Clothing & Apparel"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Home & Living"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Beauty & Personal Care"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Books & Stationery"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Toys & Games"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Sports & Outdoors"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Automotive Parts & Accessories"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Groceries & Gourmet Foods"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Health & Wellness"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Jewelry & Watches"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Pet Supplies"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Office Supplies"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Baby & Kids"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Furniture"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Art & Crafts"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Musical Instruments"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Travel & Luggage"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Garden & Outdoor"
                        },
                        new
                        {
                            Id = 20,
                            Name = "Fitness & Exercise"
                        },
                        new
                        {
                            Id = 21,
                            Name = "Watches & Accessories"
                        },
                        new
                        {
                            Id = 22,
                            Name = "Party Supplies"
                        },
                        new
                        {
                            Id = 23,
                            Name = "Industrial & Scientific"
                        },
                        new
                        {
                            Id = 24,
                            Name = "Shoes & Footwear"
                        },
                        new
                        {
                            Id = 25,
                            Name = "Seasonal & Holiday Decor"
                        });
                });

            modelBuilder.Entity("e_commerce.Models.product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("category_id")
                        .HasColumnType("int");

                    b.Property<string>("imgsource")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar");

                    b.Property<int>("quatity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("category_id");

                    b.ToTable("products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Wireless Bluetooth 5.0 headphones with 30-hour battery, noise cancellation, and ergonomic design.",
                            Name = "Wireless Bluetooth Headphones",
                            Price = 100,
                            category_id = 1,
                            imgsource = "/images/wireless-bluetooth.jpg",
                            quatity = 1002
                        },
                        new
                        {
                            Id = 2,
                            Description = "4K Ultra HD Smart TV with HDR10+, Android OS, Netflix/Prime Video, HDMI 2.1.",
                            Name = "4K Smart TV",
                            Price = 8000,
                            category_id = 1,
                            imgsource = "/images/4k-smart-tv.jpg",
                            quatity = 200
                        },
                        new
                        {
                            Id = 3,
                            Description = "Premium cotton crew-neck T-shirt for men. Available in multiple colors.",
                            Name = "Men's Cotton T-Shirt",
                            Price = 20,
                            category_id = 2,
                            imgsource = "/images/mens-tshirt.jpg",
                            quatity = 500
                        },
                        new
                        {
                            Id = 4,
                            Description = "Modern ceramic lamp with fabric shade. Perfect for living rooms.",
                            Name = "Ceramic Table Lamp",
                            Price = 45,
                            category_id = 3,
                            imgsource = "/images/table-lamp.jpg",
                            quatity = 150
                        },
                        new
                        {
                            Id = 5,
                            Description = "Vitamin C serum for glowing skin. Suitable for all skin types.",
                            Name = "Hydrating Facial Serum",
                            Price = 35,
                            category_id = 4,
                            imgsource = "/images/facial-serum.jpg",
                            quatity = 300
                        },
                        new
                        {
                            Id = 6,
                            Description = "Handcrafted leather-bound notebook with lined pages.",
                            Name = "Leather Journal Notebook",
                            Price = 19,
                            category_id = 5,
                            imgsource = "/images/leather-journal.jpg",
                            quatity = 200
                        },
                        new
                        {
                            Id = 7,
                            Description = "500-piece plastic building blocks for creative play.",
                            Name = "Building Blocks Set",
                            Price = 30,
                            category_id = 6,
                            imgsource = "/images/building-blocks.jpg",
                            quatity = 400
                        },
                        new
                        {
                            Id = 8,
                            Description = "Weather-resistant tent with easy setup. Includes carry bag.",
                            Name = "Camping Tent (4-Person)",
                            Price = 150,
                            category_id = 7,
                            imgsource = "/images/camping-tent.jpg",
                            quatity = 100
                        },
                        new
                        {
                            Id = 9,
                            Description = "Adjustable dashboard phone holder with strong suction.",
                            Name = "Car Phone Mount",
                            Price = 16,
                            category_id = 8,
                            imgsource = "/images/car-mount.jpg",
                            quatity = 600
                        },
                        new
                        {
                            Id = 10,
                            Description = "Arabica coffee beans, medium roast. Sustainably sourced.",
                            Name = "Organic Coffee Beans (1kg)",
                            Price = 20,
                            category_id = 9,
                            imgsource = "/images/coffee-beans.jpg",
                            quatity = 250
                        },
                        new
                        {
                            Id = 11,
                            Description = "Eco-friendly non-slip mat. Includes carrying strap.",
                            Name = "Yoga Mat",
                            Price = 25,
                            category_id = 10,
                            imgsource = "/images/yoga-mat.jpg",
                            quatity = 350
                        },
                        new
                        {
                            Id = 12,
                            Description = "925 sterling silver pendant necklace with chain.",
                            Name = "Silver Pendant Necklace",
                            Price = 90,
                            category_id = 11,
                            imgsource = "/images/silver-necklace.jpg",
                            quatity = 120
                        },
                        new
                        {
                            Id = 13,
                            Description = "Durable rubber chew toy for medium/large dogs.",
                            Name = "Dog Chew Toy",
                            Price = 10,
                            category_id = 12,
                            imgsource = "/images/dog-toy.jpg",
                            quatity = 800
                        },
                        new
                        {
                            Id = 14,
                            Description = "12-pack of smooth-writing black ink pens.",
                            Name = "Ballpoint Pen Set",
                            Price = 10,
                            category_id = 13,
                            imgsource = "/images/pen-set.jpg",
                            quatity = 1000
                        },
                        new
                        {
                            Id = 15,
                            Description = "Lightweight stroller with reclining seat and sunshade.",
                            Name = "Baby Stroller",
                            Price = 120,
                            category_id = 14,
                            imgsource = "/images/baby-stroller.jpg",
                            quatity = 80
                        },
                        new
                        {
                            Id = 16,
                            Description = "Solid oak table. Seats 6. Modern farmhouse design.",
                            Name = "Wooden Dining Table",
                            Price = 300,
                            category_id = 15,
                            imgsource = "/images/dining-table.jpg",
                            quatity = 50
                        },
                        new
                        {
                            Id = 17,
                            Description = "24-color set with brushes. Non-toxic and washable.",
                            Name = "Acrylic Paint Set",
                            Price = 25,
                            category_id = 16,
                            imgsource = "/images/paint-set.jpg",
                            quatity = 200
                        },
                        new
                        {
                            Id = 18,
                            Description = "Full-size guitar with spruce top. Includes gig bag.",
                            Name = "Acoustic Guitar",
                            Price = 200,
                            category_id = 17,
                            imgsource = "/images/acoustic-guitar.jpg",
                            quatity = 30
                        },
                        new
                        {
                            Id = 19,
                            Description = "Hard-shell spinner luggage. FAA-approved size.",
                            Name = "Carry-On Suitcase",
                            Price = 80,
                            category_id = 18,
                            imgsource = "/images/suitcase.jpg",
                            quatity = 150
                        },
                        new
                        {
                            Id = 20,
                            Description = "9-foot UV-resistant umbrella with tilt function.",
                            Name = "Patio Umbrella",
                            Price = 60,
                            category_id = 19,
                            imgsource = "/images/patio-umbrella.jpg",
                            quatity = 90
                        },
                        new
                        {
                            Id = 21,
                            Description = "5–25 kg adjustable set with ergonomic grips.",
                            Name = "Adjustable Dumbbells",
                            Price = 100,
                            category_id = 20,
                            imgsource = "/images/dumbbells.jpg",
                            quatity = 70
                        },
                        new
                        {
                            Id = 22,
                            Description = "Water-resistant chronograph watch with date display.",
                            Name = "Stainless Steel Watch",
                            Price = 200,
                            category_id = 21,
                            imgsource = "/images/stainless-watch.jpg",
                            quatity = 40
                        },
                        new
                        {
                            Id = 23,
                            Description = "50-piece kit with pump, strings, and assorted balloons.",
                            Name = "Balloon Decoration Kit",
                            Price = 15,
                            category_id = 22,
                            imgsource = "/images/balloon-kit.jpg",
                            quatity = 300
                        },
                        new
                        {
                            Id = 24,
                            Description = "Precision measuring tool with LCD screen. 0–150mm range.",
                            Name = "Digital Caliper",
                            Price = 35,
                            category_id = 23,
                            imgsource = "/images/digital-caliper.jpg",
                            quatity = 120
                        },
                        new
                        {
                            Id = 25,
                            Description = "Lightweight breathable shoes with cushioned sole.",
                            Name = "Running Sneakers",
                            Price = 80,
                            category_id = 24,
                            imgsource = "/images/running-shoes.jpg",
                            quatity = 250
                        },
                        new
                        {
                            Id = 26,
                            Description = "10-meter string lights with 8 lighting modes.",
                            Name = "LED Christmas Lights",
                            Price = 25,
                            category_id = 25,
                            imgsource = "/images/christmas-lights.jpg",
                            quatity = 500
                        });
                });

            modelBuilder.Entity("e_commerce.Models.wishlist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("product_id")
                        .HasColumnType("int");

                    b.Property<string>("user_id")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("product_id");

                    b.HasIndex("user_id");

                    b.ToTable("wishlist");
                });

            modelBuilder.Entity("e_commerce.appuser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("e_commerce.appuser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("e_commerce.appuser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("e_commerce.appuser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("e_commerce.appuser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("e_commerce.Models.product", b =>
                {
                    b.HasOne("e_commerce.Models.category", "cat")
                        .WithMany("Products")
                        .HasForeignKey("category_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("cat");
                });

            modelBuilder.Entity("e_commerce.Models.wishlist", b =>
                {
                    b.HasOne("e_commerce.Models.product", "product")
                        .WithMany("wishlist")
                        .HasForeignKey("product_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("e_commerce.appuser", "user")
                        .WithMany("wishlist")
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("product");

                    b.Navigation("user");
                });

            modelBuilder.Entity("e_commerce.Models.category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("e_commerce.Models.product", b =>
                {
                    b.Navigation("wishlist");
                });

            modelBuilder.Entity("e_commerce.appuser", b =>
                {
                    b.Navigation("wishlist");
                });
#pragma warning restore 612, 618
        }
    }
}
